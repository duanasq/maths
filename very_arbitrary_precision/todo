[x] move into dir
[x] learn about python modules
[x] create separate module 
[x] separate tests
[x] separate Anum tests
[x] create class file and import module
[x] represent fractional part
[ ] add with fractional part
  [x] refactor rippleCarry to return the carry
  [x] see where anum tests are at
  [x] refactor add to return the carry
  [x] refactor anum to prepend the carry
  [x] create build script
  [x] change add to zip_add
    [x] add tests to see what happens if diff lengths
  [x] move add tests to anum test
    [x] decide how to treat empty arrays
    [x] add test for abitrary precision
  [x] refactor add to take padding direction
  [ ] implement fractional adding with these
    [x] change zip_add to take more than 2 args
    [x] be able to prepend / append for all operands
    [x] refactor to use map
  [ ] anum can add fractions, add the carry, then add the whole numbers, then prepend the carry

[ ] finish reading https://rushter.com/blog/python-integer-implementation/

